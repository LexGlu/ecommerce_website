version: "3.9"

services:
  db:
    image: postgres:15.2-alpine
    container_name: postgres_db
    restart: always
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data

  django_ecom_app:
    build: .
    container_name: app
    env_file: .env
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             if [ $(cat db_dump/db_empty) = 'True' ]; then
               python manage.py shell -c 'from django.contrib.contenttypes.models import ContentType; ContentType.objects.all().delete()' &&
               python manage.py loaddata /usr/src/app/db_dump/data.json &&
               echo 'False' > db_dump/db_empty;
             fi &&
             apt install procps nano -y &&
             celery multi start worker1 -A ecom_website -l info &&
             gunicorn ecom_website.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - db_dump:/usr/src/app/db_dump
      - ./ecom_website:/usr/src/app/ecom_website
      - ./store:/usr/src/app/store
      - ./api:/usr/src/app/api
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
      - type: bind
        source: .env
        target: /usr/src/app/.env
      - type: bind
        source: ./manage.py
        target: /usr/src/app/manage.py
      - type: bind
        source: ./requirements.txt
        target: /usr/src/app/requirements.txt

    restart: always
    depends_on:
      - db
      - redis

  nginx:
    image: nginx:1.23.4-alpine
    container_name: nginx
    restart: always
    env_file: .env
    ports:
      - "80:80"
    volumes:
      - ./ssl:/etc/nginx/ssl
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/nginx.conf
    depends_on:
      - django_ecom_app

  adminer:
    container_name: adminer
    image: adminer:4.8.1-standalone
    restart: always
    ports:
      - "8080:8080"

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  static_volume:
  media_volume:
  db_dump:
  redis_data: