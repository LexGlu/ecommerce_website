import json
import psycopg2
import random
import requests

def upload_image(image_url):
    path = f"/usr/src/app/media/uploads/products/{image_url.split('/')[-1]}"
    with open(path, 'wb') as f:
        f.write(requests.get(image_url).content)
    return None

# connect to the database
connection = psycopg2.connect(
    host="db",
    database="postgres",
    user="postgres",
    password="password",
    port=5432,
)

# # create a cursor object
cursor = connection.cursor()

# Table properties:
# Column	Type	Comment
# id	bigint Auto Increment [GENERATED BY DEFAULT AS IDENTITY]
# name	character varying(128)
# description	text
# digital	boolean NULL
# price	numeric(9,2)
# stock	integer
# image	character varying(100) NULL
# category_id	bigint

db_categories = {
    'Смартфони і мобільні телефони': 1,
    'Телевізори': 5,
    'Ігрові консолі': 6,
    'Ноутбуки': 7,
    '📱 Планшети': 8,
    'Монітори': 9,
}

# open jsonl file
with open('allo_products.jsonl') as file:
    # read each line
    for line in file:
        # load the json object
        data = json.loads(line)
        if data['product_in_stock'] != '' or not data['product_img_url']:
            continue
        name = data['product_name']
        description = data['product_description'].replace("'", "")
        price = float(data['product_price_current_uah'])

        stock = random.randint(1, 100)
        digital = False
        image = f"uploads/products/{data['product_img_url'].split('/')[-1]}"
        if len(image) > 100:
          continue
        category_id = db_categories[data['category']]
        # print each variable to the console

        # insert the data into the table
        cursor.execute(
            f"INSERT INTO store_product (name, description, digital, price, stock, image, category_id)"
            f"VALUES ('{name}', '{description}', {digital}, {price}, {stock}, '{image}', {category_id});"
        )

        upload_image(data['product_img_url'])
# commit the changes to the database
connection.commit()

# close the cursor and connection
cursor.close()
connection.close()
